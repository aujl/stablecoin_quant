name: Prepare Poetry Environment

on:
  workflow_call:
    inputs:
      python-version:
        description: "Python version to use"
        required: false
        type: string
        default: "3.12"
      poetry-version:
        description: "Poetry version to install"
        required: false
        type: string
        default: "1.8.4"
      install-args:
        description: "Arguments passed to 'poetry install'"
        required: false
        type: string
        default: "--with dev --no-interaction"
      artifacts-dir:
        description: "Directory used to store cached environment artifacts"
        required: false
        type: string
        default: "artifacts"
    outputs:
      artifacts-dir:
        description: "Relative path containing cached environment data"
        value: ${{ jobs.setup.outputs.artifacts-dir }}
      environment-artifact:
        description: "Name of the uploaded cached environment artifact"
        value: ${{ jobs.setup.outputs.environment-artifact }}

jobs:
  setup:
    name: Build Poetry environment artifact
    runs-on: ubuntu-latest
    outputs:
      artifacts-dir: ${{ steps.metadata.outputs.artifacts-dir }}
      environment-artifact: ${{ steps.metadata.outputs.artifact-name }}
    env:
      PYTHON_VERSION: ${{ inputs.python-version }}
      POETRY_VERSION: ${{ inputs.poetry-version }}
      INSTALL_ARGS: ${{ inputs.install-args }}
      ARTIFACTS_DIR: ${{ inputs.artifacts-dir }}
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Check out repository
        uses: actions/checkout@v4

      - name: Initialise artifact metadata
        id: metadata
        run: |
          set -euo pipefail
          artifacts_path="${GITHUB_WORKSPACE}/${ARTIFACTS_DIR}"
          artifact_name="stablecoin-quant-env-${GITHUB_RUN_ID}"

          mkdir -p "${artifacts_path}"
          mkdir -p "${artifacts_path}/poetry-cache"
          mkdir -p "${artifacts_path}/poetry-data"
          mkdir -p "${artifacts_path}/venv"

          echo "artifacts-dir=${ARTIFACTS_DIR}" >>"${GITHUB_OUTPUT}"
          echo "artifact-name=${artifact_name}" >>"${GITHUB_OUTPUT}"
          echo "ARTIFACTS_PATH=${artifacts_path}" >>"${GITHUB_ENV}"
          echo "ENV_ARTIFACT_NAME=${artifact_name}" >>"${GITHUB_ENV}"

      - name: Install Poetry
        run: |
          set -euo pipefail
          curl -sSL https://install.python-poetry.org | python - --version "${POETRY_VERSION}"
          echo "${HOME}/.local/bin" >>"${GITHUB_PATH}"

      - name: Configure Poetry and caches
        run: |
          set -euo pipefail
          export POETRY_CACHE_DIR="${ARTIFACTS_PATH}/poetry-cache"
          export POETRY_DATA_DIR="${ARTIFACTS_PATH}/poetry-data"

          poetry --version
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          poetry config installer.parallel true
          poetry config cache-dir "${POETRY_CACHE_DIR}"

      - name: Restore Poetry cache
        uses: actions/cache@v4
        with:
          path: ${{ env.ARTIFACTS_PATH }}/poetry-cache
          key: poetry-cache-${{ runner.os }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            poetry-cache-${{ runner.os }}-

      - name: Install project dependencies
        run: |
          set -euo pipefail
          export POETRY_CACHE_DIR="${ARTIFACTS_PATH}/poetry-cache"
          export POETRY_DATA_DIR="${ARTIFACTS_PATH}/poetry-data"

          poetry install ${INSTALL_ARGS}
          poetry run python - <<'PY'
          import sys
          print(f"Poetry environment Python: {sys.executable}")
          PY

      - name: Snapshot virtual environment
        run: |
          set -euo pipefail
          export VENV_PATH="$(poetry env info --path)"
          rsync -a --delete "${VENV_PATH}/" "${ARTIFACTS_PATH}/venv/"

      - name: Generate environment activation script
        run: |
          set -euo pipefail
          cat <<'SH' >"${ARTIFACTS_PATH}/python-env.sh"
          #!/usr/bin/env bash
          # Auto-generated by setup-environment workflow
          export PYTHON_VERSION="${PYTHON_VERSION}"
          export POETRY_VERSION="${POETRY_VERSION}"
          export ARTIFACTS_DIR="${ARTIFACTS_DIR}"
          export POETRY_CACHE_DIR="$GITHUB_WORKSPACE/${ARTIFACTS_DIR}/poetry-cache"
          export POETRY_DATA_DIR="$GITHUB_WORKSPACE/${ARTIFACTS_DIR}/poetry-data"
          export VIRTUAL_ENV="$GITHUB_WORKSPACE/.venv"
          export PROJECT_DIR="$GITHUB_WORKSPACE"
          export PATH="$VIRTUAL_ENV/bin:$HOME/.local/bin:$PATH"
          SH
          chmod +x "${ARTIFACTS_PATH}/python-env.sh"

      - name: Upload environment artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ENV_ARTIFACT_NAME }}
          path: ${{ env.ARTIFACTS_PATH }}
          if-no-files-found: error
          include-hidden-files: true
          retention-days: 2
